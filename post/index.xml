<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 碎碎念</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on 碎碎念</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 27 Oct 2015 22:59:26 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我的第2个文章</title>
      <link>http://localhost:1313/post/2/</link>
      <pubDate>Tue, 27 Oct 2015 22:59:26 +0800</pubDate>
      
      <guid>http://localhost:1313/post/2/</guid>
      <description>&lt;p&gt;#评论功能&lt;/p&gt;

&lt;p&gt;个人博客当然不能没有评论，Hugo默认支持Disqus的评论，需要在模版中添加以下代码：&lt;/p&gt;

&lt;p&gt;{{ template &amp;ldquo;_internal/disqus.html&amp;rdquo; . }}
spf13在/layouts/partials/disqus.html中已经添加好了。&lt;/p&gt;

&lt;p&gt;只需要去Disqus注册一个账号，然后在config.toml里加上：&lt;/p&gt;

&lt;p&gt;disqusShortname = &amp;ldquo;yourdisqusShortname&amp;rdquo;
注意-w参数是不能监测config.toml里参数变化的，因此需要重新运行Hugo，进入localhost:1313/about，可以看到评论功能。&lt;/p&gt;

&lt;p&gt;comments
#代码高亮&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;作为码农，代码高亮对于写博客来说当然必不可少。有两种方法：第一种是在生成页面时就生成好代码高亮过的页面；第二种是使用js，用户加载页面时浏览器再进行渲染。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第一种方法需要使用Pygments，一个python写的工具。&lt;/p&gt;

&lt;p&gt;安装Pygments：&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>测试文章</title>
      <link>http://localhost:1313/post/first/</link>
      <pubDate>Tue, 27 Oct 2015 22:59:26 +0800</pubDate>
      
      <guid>http://localhost:1313/post/first/</guid>
      <description>

&lt;p&gt;###我的第一个文章###
##下载地址##
&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34; title=&#34;hugo&#34;&gt;下载地址&lt;/a&gt;
&lt;img src=&#34;http://localhost:1313/img/hugo-logo.png&#34; alt=&#34;hugo&#34; /&gt;

Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如jQuery、Twitter等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了Github Pages的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。&lt;/p&gt;

&lt;p&gt;Github Pages有以下几个优点：&lt;/p&gt;

&lt;p&gt;轻量级的博客系统，没有麻烦的配置
使用标记语言，比如Markdown 无需自己搭建服务器
根据Github的限制，对应的每个站有300MB空间
可以绑定自己的域名
当然他也有缺点：&lt;/p&gt;

&lt;p&gt;使用Jekyll模板系统，相当于静态页发布，适合博客，文档介绍等。
动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。
基于Git，很多东西需要动手，不像Wordpress有强大的后台
大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。&lt;/p&gt;

&lt;p&gt;#注册github
#域名购买
#
#git的安装，使用
#
&amp;gt;首先 ssh-keygen 会确认密钥的存储位置（默认是 .ssh/id_rsa），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可。&lt;/p&gt;

&lt;p&gt;现在，进行了上述操作的用户需要将各自的公钥发送给任意一个 Git 服务器管理员（假设服务器正在使用基于公钥的 SSH 验证设置）。 他们所要做的就是复制各自的 .pub 文件内容，并将其通过邮件发送。 公钥看起来是这样的：&lt;/p&gt;

&lt;p&gt;$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q== schacon@mylaptop.local&lt;/p&gt;

&lt;p&gt;###使用hugo搭建个人博客站点###
##什么是Hugo##
雨果是通用网站框架。从技术上讲，雨果是一个静态的网站发生器。这意味着，与像WordPress，鬼和Drupal系统，Web服务器的每一个用户请求一次昂贵的建设网页上运行，胡戈做的建筑，当你创建的内容。由于网站被观看的次数远远多于它们进行编辑，雨果进行了优化，网站同时提供了一个巨大的书写体验观看。&lt;/p&gt;

&lt;p&gt;建有雨果的网站是非常快，非常安全。雨果的网站可以在任何地方举行，包括Heroku的，GoDaddy的 ，DreamHost的 ，GitHub 上的页面 ，谷歌云存储，亚马逊S3和CloudFront的，并与CDN的工作。雨果网站没有昂贵的运行环境，比如Ruby，Python或PHP，没有任何数据库的依赖依赖运行。&lt;/p&gt;

&lt;p&gt;我们认为，雨果的理想网站创建工具。随着近即时生成时间和重建，每当一个变化是由的能力，雨果提供了一个非常快速的反馈回路。这是必不可少的，当你在设计网站，也是非常有用的创建内容的时候。&lt;/p&gt;

&lt;p&gt;是什么让雨果不同？
##谁应该使用雨果？##&lt;/p&gt;

&lt;p&gt;雨果对于那些喜欢写在一个浏览器中的文本编辑器的人。&lt;/p&gt;

&lt;p&gt;雨果是谁想要手工编码自己的网站，而不必担心设置复杂的运行时间，相关性和数据库的人。&lt;/p&gt;

&lt;p&gt;雨果是人们建立一个博客，公司网站，投资组合，tumblog，文档，单页网站或网站有数千页。
下载 &lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;
##安装雨果（二进制）##&lt;/p&gt;

&lt;p&gt;安装非常简单。只需下载相应版本的平台，雨果发布。一旦下载就可以在任何地方运行。你不需要把它安装到一个全球性的位置。这非常适用于共享主机和其他系统，你没有特权帐户。&lt;/p&gt;

&lt;p&gt;理想情况下，你应该在你的地方安装路径，方便使用。 在/ usr / local / bin目录是最有可能的位置。&lt;/p&gt;

&lt;p&gt;在OS X上，如果你有自制软件，安装更简单：只要运行BREW安装雨果。&lt;/p&gt;

&lt;p&gt;安装Pygments（可选）&lt;/p&gt;

&lt;p&gt;雨果的可执行文件有一个可选的外部依赖的源代码高亮（Pygments）。&lt;/p&gt;

&lt;p&gt;如果你想拥有源代码中使用了高亮的亮点简码，您需要安装基于Python的Pygments计划。该过程中概述的上Pygments主页。
##添加path变量##
##生成网站的目录##
下载下来后，只有一个叫hugo或者hugo.exe的程序，接下来开始生成自己的站点：&lt;/p&gt;

&lt;p&gt;$ hugo new site mysite
然后hugo会自动生成这样一个目录结构：&lt;/p&gt;

&lt;p&gt;▸ archetypes/
  ▸ content/
  ▸ layouts/
  ▸ static/
    config.toml
简要介绍一下，config.toml是网站的配置文件，这是一个TOML文件，全称是Tom’s Obvious, Minimal Language，这是它的作者GitHub联合创始人Tom Preston-Werner 觉得YAML不够优雅，捣鼓出来的一个新格式。如果你不喜欢这种格式，你可以将config.toml替换为YAML格式的config.yaml，或者json格式的config.json。hugo都支持。&lt;/p&gt;

&lt;p&gt;content目录里放的是你写的markdown文章，layouts目录里放的是网站的模板文件，static目录里放的是一些图片、css、js等资源。&lt;/p&gt;

&lt;p&gt;进入生成的site目录：&lt;/p&gt;

&lt;p&gt;$ cd mysite
创建一个页面：&lt;/p&gt;

&lt;p&gt;$ hugo new about.md
如果是博客日志，最好将md文件放在content的post目录里。&lt;/p&gt;

&lt;p&gt;$ hugo new post/first.md
执行完后，会在content/post目录自动生成一个MarkDown格式的first.md文件：&lt;/p&gt;

&lt;p&gt;+++
date = &amp;ldquo;2015-01-08T08:36:54-07:00&amp;rdquo;
draft = true
title = &amp;ldquo;first&amp;rdquo;&lt;/p&gt;

&lt;p&gt;+++
+++可以替换为Jekyll一样的&amp;mdash;，里面的内容是这篇文章的一些信息。下面就可以开始写你的文章内容，比如：&lt;/p&gt;

&lt;p&gt;+++
date = &amp;ldquo;2015-01-08T08:36:54-07:00&amp;rdquo;
draft = true
title = &amp;ldquo;first&amp;rdquo;&lt;/p&gt;

&lt;p&gt;+++&lt;/p&gt;

&lt;h3 id=&#34;hello-hugo:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Hello Hugo&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;aaa&lt;/li&gt;
&lt;li&gt;bbb&lt;/li&gt;
&lt;li&gt;ccc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OK，刚才的about.md也有内容，该看看最后的效果了。然后你屁颠屁颠的使用hugo server启动，打开浏览器里一看，发现毛都没有！这是肿么了！&lt;/p&gt;

&lt;p&gt;这是Hugo对初学者非常不友好的地方，默认生成的网站是没有任何皮肤模板的。为了看看第一个写的示例，还得去Github上把一个网页模板下载下来。如果你网络够好，网速够快，你可以在刚才的目录将Hugo官方的所有模板都下载下来：&lt;/p&gt;

&lt;p&gt;$git clone &amp;ndash;recursive &lt;a href=&#34;https://github.com/spf13/hugoThemes.git&#34;&gt;https://github.com/spf13/hugoThemes.git&lt;/a&gt; themes
我尝试过，也失败过，且从未成功一次性将所有的模板下载下来。所以，我们还是老老实实只下载其中一个模板来看看效果吧：&lt;/p&gt;

&lt;p&gt;$ cd themes
$ git clone &lt;a href=&#34;https://github.com/spf13/hyde.git&#34;&gt;https://github.com/spf13/hyde.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;zip打包下载方法，解压后烤白到themes 的文件夹下。
&lt;a href=&#34;https://github.com/spf13/hugoThemes/archive/master.zip&#34;&gt;https://github.com/spf13/hugoThemes/archive/master.zip&lt;/a&gt;
启动本地调试：&lt;/p&gt;

&lt;p&gt;$ hugo server &amp;ndash;theme=hyde &amp;ndash;buildDrafts &amp;ndash;watch&lt;/p&gt;

&lt;p&gt;关于部署&lt;/p&gt;

&lt;p&gt;Update(2015-10-08)&lt;/p&gt;

&lt;p&gt;Hugo部署到GitHub，首先在config.yaml(.toml)里设置好baseurl，然后用Hugo生成静态页面（生成的文件全在public文件夹里）&lt;/p&gt;

&lt;p&gt;用github pages作为网站的Host&lt;/p&gt;

&lt;p&gt;Github pages分为两种：一种是项目主页，每个项目都可以有一个；另一种是用户主页，一个用户只能有一个。&lt;/p&gt;

&lt;p&gt;因为用户主页只能有一个，所以建议使用项目主页托管，不过我这里采用了用户主页，反正我也只用一个博客，使用个人主页作为Host也相对更简单一点。&lt;/p&gt;

&lt;p&gt;我们需要创建两个单独的repo，一个用于放Hugo的输入文件，即除了public/文件夹之外的所有文件，另一个放我们生成的静态网站，也就是public/的内容。&lt;/p&gt;

&lt;p&gt;步骤如下：&lt;/p&gt;

&lt;p&gt;在Github上创建repo &lt;your-project&gt;-hugo，托管Hugo的输入文件。
创建repo &lt;username&gt;.github.io，用于托管public/文件夹，注意这里的repo名字一定要用自己的用户名，才会被当作是个人主页。
clone your-project
$ git clone &amp;lt;&lt;your-project&gt;-hugo-url&amp;gt;
进入your-project 目录
$ cd &lt;your-project&gt;-hugo
删掉public目录（这个目录每次运行Hugo都会再次生成，不用担心）
$ rm -rf public
把public/目录添加为submodule 与.github.io同步
$ git submodule add git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git public
添加.gitignore文件，文件中写public/，在同步&lt;your-project&gt;-hugo时会忽略public文件夹
下面是写好的一个script deploy.sh，拷贝过去直接就能用，记得chmod +x deploy.sh加上运行权限。
#!/bin/bash
echo -e &amp;ldquo;\033[0;32mDeploying updates to GitHub&amp;hellip;\033[0m&amp;rdquo;&lt;/p&gt;

&lt;p&gt;msg=&amp;ldquo;rebuilding site &lt;code&gt;date&lt;/code&gt;&amp;ldquo;
if [ $# -eq 1 ]
  then msg=&amp;ldquo;$1&amp;rdquo;
fi&lt;/p&gt;

&lt;h1 id=&#34;push-hugo-content:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Push Hugo content&lt;/h1&gt;

&lt;p&gt;git add -A
git commit -m &amp;ldquo;$msg&amp;rdquo;
git push origin master&lt;/p&gt;

&lt;h1 id=&#34;build-the-project:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Build the project.&lt;/h1&gt;

&lt;p&gt;hugo # if using a theme, replace by &lt;code&gt;hugo -t &amp;lt;yourtheme&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;go-to-public-folder:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Go To Public folder&lt;/h1&gt;

&lt;p&gt;cd public&lt;/p&gt;

&lt;h1 id=&#34;add-changes-to-git:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Add changes to git.&lt;/h1&gt;

&lt;p&gt;git add -A&lt;/p&gt;

&lt;h1 id=&#34;commit-changes:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Commit changes.&lt;/h1&gt;

&lt;p&gt;git commit -m &amp;ldquo;$msg&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;push-source-and-build-repos:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Push source and build repos.&lt;/h1&gt;

&lt;p&gt;git push origin master&lt;/p&gt;

&lt;h1 id=&#34;come-back:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Come Back&lt;/h1&gt;

&lt;p&gt;cd ..&lt;/p&gt;

&lt;p&gt;等一小会儿（10分钟左右），你就能在&lt;a href=&#34;http://username.github.io/&#34;&gt;http://username.github.io/&lt;/a&gt; 这个页面看到你的网站了！每次更新网站或者写了新文章，只需要运行./deploy.sh 发布就搞定了，简单吧？&lt;/p&gt;

&lt;p&gt;Github pages还支持域名绑定，三个步骤：&lt;/p&gt;

&lt;p&gt;在&lt;username&gt;.github.io repo的跟目录下添加CNAME文件，文件里写上你的域名，不用加http://的开头。
记下&lt;a href=&#34;http://username.github.io/&#34;&gt;http://username.github.io/&lt;/a&gt; 的ip地址。
$ ping username.github.io
在你的域名管理中加上两条A记录，分别是www和@，记录指向&lt;a href=&#34;http://username.github.io/&#34;&gt;http://username.github.io/&lt;/a&gt; 的ip地址，也需要等一小会儿生效。
更改字体服务商&lt;/p&gt;

&lt;p&gt;我的博客模版里用的字体是从googleapis里获取的，国内访问会下载失败，把字体库改成360的。 找到layouts/partials/head_includes.html文件：&lt;/p&gt;

&lt;p&gt;&lt;link href=&#39;http://fonts.googleapis.com/css?family=Fjalla+One|Open+Sans:300&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&gt;
将其中的googleapis替换为useso就行了。&lt;/p&gt;

&lt;p&gt;教程会根据我的博客遇到的问题继续更新。&lt;/p&gt;

&lt;p&gt;参考：
&lt;a href=&#34;http://nanshu.wang/%E8%98%85%E8%8A%9C/%E7%94%A8Hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&#34;&gt;http://nanshu.wang/%E8%98%85%E8%8A%9C/%E7%94%A8Hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&lt;/a&gt;
&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;http://blog.coderzh.com/2015/08/29/hugo/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>